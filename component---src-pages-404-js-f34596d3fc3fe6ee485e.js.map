{"version":3,"sources":["webpack://sarangjo.github.io/./src/components/seo.js","webpack://sarangjo.github.io/./src/pages/404.js"],"names":["SEO","description","lang","meta","keywords","title","StaticQuery","query","detailsQuery","render","data","metaDescription","site","siteMetadata","htmlAttributes","titleTemplate","name","content","property","author","concat","length","join","defaultProps","NotFoundPage","siteTitle","this","props","location","React"],"mappings":"+JAKA,SAASA,EAAT,GAA4D,IAA7CC,EAA4C,EAA5CA,YAAaC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,SAAUC,EAAS,EAATA,MAChD,OACE,gBAAC,EAAAC,YAAD,CACEC,MAAOC,EACPC,OAAQ,SAAAC,GACN,IAAMC,EACJV,GAAeS,EAAKE,KAAKC,aAAaZ,YACxC,OACE,gBAAC,KAAD,CACEa,eAAgB,CACdZ,QAEFG,MAAOA,EACPU,cAAa,QAAUL,EAAKE,KAAKC,aAAaR,MAC9CF,KAAM,CACJ,CACEa,KAAK,cACLC,QAASN,GAEX,CACEO,SAAS,WACTD,QAASZ,GAEX,CACEa,SAAS,iBACTD,QAASN,GAEX,CACEO,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,QAASP,EAAKE,KAAKC,aAAaM,QAElC,CACEH,KAAK,gBACLC,QAASZ,GAEX,CACEW,KAAK,sBACLC,QAASN,IAGVS,OACChB,EAASiB,OAAS,EACd,CACAL,KAAK,WACLC,QAASb,EAASkB,KAAT,OAET,IAELF,OAAOjB,QAQtBH,EAAIuB,aAAe,CACjBrB,KAAK,KACLC,KAAM,GACNC,SAAU,IAWZ,MAEA,IAAMI,EAAY,c,oFC9EZgB,E,6FACJf,OAAA,WAAU,IAEFgB,EADWC,KAAKC,MAAdjB,KACeE,KAAKC,aAAaR,MAEzC,OACE,gBAAC,IAAD,CAAQuB,SAAUF,KAAKC,MAAMC,SAAUvB,MAAOoB,GAC5C,gBAAC,IAAD,CAAKpB,MAAM,mBACX,uCACA,sF,GATmBwB,aAoB3B","file":"component---src-pages-404-js-f34596d3fc3fe6ee485e.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Helmet from \"react-helmet\";\nimport { StaticQuery, graphql } from \"gatsby\";\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  return (\n    <StaticQuery\n      query={detailsQuery}\n      render={data => {\n        const metaDescription =\n          description || data.site.siteMetadata.description;\n        return (\n          <Helmet\n            htmlAttributes={{\n              lang,\n            }}\n            title={title}\n            titleTemplate={`%s | ${data.site.siteMetadata.title}`}\n            meta={[\n              {\n                name: `description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:title`,\n                content: title,\n              },\n              {\n                property: `og:description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:type`,\n                content: `website`,\n              },\n              {\n                name: `twitter:card`,\n                content: `summary`,\n              },\n              {\n                name: `twitter:creator`,\n                content: data.site.siteMetadata.author,\n              },\n              {\n                name: `twitter:title`,\n                content: title,\n              },\n              {\n                name: `twitter:description`,\n                content: metaDescription,\n              },\n            ]\n              .concat(\n                keywords.length > 0\n                  ? {\n                    name: `keywords`,\n                    content: keywords.join(`, `),\n                  }\n                  : []\n              )\n              .concat(meta)}\n          />\n        );\n      }}\n    />\n  );\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  keywords: [],\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n};\n\nexport default SEO;\n\nconst detailsQuery = graphql`\n  query DefaultSEOQuery {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n      }\n    }\n  }\n`;\n","import React from \"react\";\nimport { graphql } from \"gatsby\";\nimport PropTypes from \"prop-types\";\n\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\n\nclass NotFoundPage extends React.Component {\n  render() {\n    const { data } = this.props;\n    const siteTitle = data.site.siteMetadata.title;\n\n    return (\n      <Layout location={this.props.location} title={siteTitle}>\n        <SEO title=\"404: Not Found\" />\n        <h1>Not Found</h1>\n        <p>You just hit a route that doesn&#39;t exist... the sadness.</p>\n      </Layout>\n    );\n  }\n}\n\nNotFoundPage.propTypes = {\n  data: PropTypes.object,\n  location: PropTypes.object,\n};\n\nexport default NotFoundPage;\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}
{"version":3,"file":"component---src-pages-theater-tsx-81d467027e3224d2ef62.js","mappings":"8LAIA,MAAMA,EAAUA,CAACC,EAAMC,IACZ,YAATA,EACEC,EAAAA,cAAA,SAAIF,EAAKG,YAAYC,QAErBF,EAAAA,cAAA,KAAGG,wBAAyB,CAAEC,OAAQN,EAAKO,WAGhC,SAASC,EAAWC,GAAgD,IAA/C,KAAET,EAAI,KAAEC,GAAoCQ,EAC9E,MAAMC,EAAQV,EAAKG,YAAYO,OAASV,EAAKW,OAAOC,KACpD,OACEV,EAAAA,cAAA,OAAKW,IAAKb,EAAKW,OAAOC,MACpBV,EAAAA,cAAA,MACEY,MAAO,CACLC,cAAcC,EAAAA,EAAAA,IAAO,EAAI,KAG3Bd,EAAAA,cAACe,EAAAA,KAAI,CAACH,MAAO,CAAEI,UAAU,QAAWC,GAAInB,EAAKW,OAAOC,MACjDF,IAGLR,EAAAA,cAAA,aAAQF,EAAKG,YAAYiB,MACxBrB,EAAQC,EAAMC,GAGrB,C,yFCxBe,SAASoB,EAAGZ,GAYvB,IAZwB,YAC1Ba,EAAW,KACXC,EAAI,KAAO,KACXC,EAAO,GAAE,SACTC,EAAW,GAAE,MACbf,GAODD,EACC,OACEP,EAAAA,cAACwB,EAAAA,YAAW,CACVC,MAAOC,EACPC,OAASC,IACP,MAAMC,EAAkBT,GAAeQ,EAAKE,KAAKC,aAAaX,YAC9D,OACEpB,EAAAA,cAACgC,EAAAA,EAAM,CACLC,eAAgB,CACdZ,QAEFb,MAAOA,EACP0B,cAAa,QAAUN,EAAKE,KAAKC,aAAavB,MAC9Cc,KAAM,CACJ,CACEa,KAAK,cACLtC,QAASgC,GAEX,CACEO,SAAS,WACTvC,QAASW,GAEX,CACE4B,SAAS,iBACTvC,QAASgC,GAEX,CACEO,SAAS,UACTvC,QAAQ,WAEV,CACEsC,KAAK,eACLtC,QAAQ,WAEV,CACEsC,KAAK,kBACLtC,QAAS+B,EAAKE,KAAKC,aAAaM,QAElC,CACEF,KAAK,gBACLtC,QAASW,GAEX,CACE2B,KAAK,sBACLtC,QAASgC,IAGVS,OACCf,EAASgB,OAAS,EACd,CACEJ,KAAK,WACLtC,QAAS0B,EAASiB,KAAK,OAEzB,IAELF,OAAOhB,IACV,GAKZ,CAEA,MAAMI,EAAY,Y,gHCxElB,MAAMe,EAAQ,UACRC,EAAc,qEAEL,SAASC,EAAaC,GACnC,MAAM,KAAEhB,GAASgB,EACXpC,EAAQoB,EAAKE,KAAKC,aAAavB,MAC/BqC,EAAQjB,EAAKkB,YAAYC,MAG/B,OACE/C,EAAAA,cAACgD,EAAAA,EAAM,CACLC,SAAUL,EAAMK,SAChBzC,MAAOiC,EACPrB,YAAasB,EACbQ,YAAgBT,EAAK,MAAMjC,EAC3B2C,SAAS,GAETnD,EAAAA,cAACmB,EAAAA,EAAG,CAACX,MAAOiC,EAAOlB,SAAU,CAAC,UAAD,iCAC5BsB,EAAMO,KAAI,CAAA7C,EAAW8C,KAAC,IAAX,KAAEvD,GAAMS,EAAA,OAClBP,EAAAA,cAACM,EAAAA,EAAW,CAACK,IAAK0C,EAAGvD,KAAMA,EAAMC,KAAK,WAAY,IAI1D,C","sources":["webpack://sarangjo.github.io/./src/components/postExcerpt.tsx","webpack://sarangjo.github.io/./src/components/seo.tsx","webpack://sarangjo.github.io/./src/pages/theater.tsx"],"sourcesContent":["import React from \"react\";\nimport { Link } from \"gatsby\";\nimport { rhythm } from \"../utils/typography\";\n\nconst content = (node, type) =>\n  type === \"theater\" ? (\n    <p>{node.frontmatter.source}</p>\n  ) : (\n    <p dangerouslySetInnerHTML={{ __html: node.excerpt }} />\n  );\n\nexport default function PostExcerpt({ node, type }: { node: any; type?: string }) {\n  const title = node.frontmatter.title || node.fields.slug;\n  return (\n    <div key={node.fields.slug}>\n      <h3\n        style={{\n          marginBottom: rhythm(1 / 4),\n        }}\n      >\n        <Link style={{ boxShadow: `none` }} to={node.fields.slug}>\n          {title}\n        </Link>\n      </h3>\n      <small>{node.frontmatter.date}</small>\n      {content(node, type)}\n    </div>\n  );\n}\n","import React from \"react\";\nimport Helmet from \"react-helmet\";\nimport { StaticQuery, graphql } from \"gatsby\";\n\nexport default function SEO({\n  description,\n  lang = `en`,\n  meta = [],\n  keywords = [],\n  title,\n}: {\n  description?: string;\n  lang?: string;\n  meta?: any[];\n  keywords?: string[];\n  title: string;\n}) {\n  return (\n    <StaticQuery\n      query={detailsQuery}\n      render={(data) => {\n        const metaDescription = description || data.site.siteMetadata.description;\n        return (\n          <Helmet\n            htmlAttributes={{\n              lang,\n            }}\n            title={title}\n            titleTemplate={`%s | ${data.site.siteMetadata.title}`}\n            meta={[\n              {\n                name: `description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:title`,\n                content: title,\n              },\n              {\n                property: `og:description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:type`,\n                content: `website`,\n              },\n              {\n                name: `twitter:card`,\n                content: `summary`,\n              },\n              {\n                name: `twitter:creator`,\n                content: data.site.siteMetadata.author,\n              },\n              {\n                name: `twitter:title`,\n                content: title,\n              },\n              {\n                name: `twitter:description`,\n                content: metaDescription,\n              },\n            ]\n              .concat(\n                keywords.length > 0\n                  ? {\n                      name: `keywords`,\n                      content: keywords.join(`, `),\n                    }\n                  : []\n              )\n              .concat(meta)}\n          />\n        );\n      }}\n    />\n  );\n}\n\nconst detailsQuery = graphql`\n  query DefaultSEOQuery {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n      }\n    }\n  }\n`;\n","import React from \"react\";\nimport { graphql, PageProps } from \"gatsby\";\n\nimport PostExcerpt from \"../components/postExcerpt\";\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\n\nconst TITLE = \"Theater\";\nconst DESCRIPTION = \"All the world's a stage, and all the men and women merely players.\";\n\nexport default function TheaterIndex(props: PageProps<any>) {\n  const { data } = props;\n  const title = data.site.siteMetadata.title;\n  const posts = data.allFountain.edges;\n\n  // TODO factor out redundant code about helmetTitle\n  return (\n    <Layout\n      location={props.location}\n      title={TITLE}\n      description={DESCRIPTION}\n      helmetTitle={`${TITLE} | ${title}`}\n      showBio={false}\n    >\n      <SEO title={TITLE} keywords={[`theater`, `gatsby`, `javascript`, `react`]} />\n      {posts.map(({ node }, i) => (\n        <PostExcerpt key={i} node={node} type=\"theater\" />\n      ))}\n    </Layout>\n  );\n}\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allFountain(sort: { frontmatter: { date: DESC } }) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            source\n          }\n        }\n      }\n    }\n  }\n`;\n"],"names":["content","node","type","React","frontmatter","source","dangerouslySetInnerHTML","__html","excerpt","PostExcerpt","_ref","title","fields","slug","key","style","marginBottom","rhythm","Link","boxShadow","to","date","SEO","description","lang","meta","keywords","StaticQuery","query","detailsQuery","render","data","metaDescription","site","siteMetadata","Helmet","htmlAttributes","titleTemplate","name","property","author","concat","length","join","TITLE","DESCRIPTION","TheaterIndex","props","posts","allFountain","edges","Layout","location","helmetTitle","showBio","map","i"],"sourceRoot":""}
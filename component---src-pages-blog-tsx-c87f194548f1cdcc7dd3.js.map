{"version":3,"file":"component---src-pages-blog-tsx-c87f194548f1cdcc7dd3.js","mappings":"wMAKA,MAAMA,EAAUA,CAACC,EAAgBC,IACtB,YAATA,EACEC,EAAAA,cAAA,SAAIF,EAAKG,YAAYC,QACV,aAATH,EACFC,EAAAA,cAAA,SACEA,EAAAA,cAAA,SAAIF,EAAKK,OAAOC,OAGlBJ,EAAAA,cAAA,KAAGK,wBAAyB,CAAEC,OAAQR,EAAKS,WAiBhC,SAASC,EAAWC,GAAqD,IAApD,KAAEX,EAAI,KAAEC,GAAyCU,EACnF,MAAMC,EAAQZ,EAAKG,YAAYS,OAASZ,EAAKK,OAAOQ,KACpD,OACEX,EAAAA,cAAA,OAAKY,IAAKd,EAAKK,OAAOQ,MACpBX,EAAAA,cAAA,MACEa,MAAO,CACLC,cAAcC,EAAAA,EAAAA,IAAO,EAAI,KAG1BjB,EAAKK,OAAOa,SACXhB,EAAAA,cAACiB,EAAAA,EAAC,CAACJ,MAAO,CAAEK,UAAY,QAASC,GAAIrB,EAAKK,OAAOQ,MAC9CD,GAGHV,EAAAA,cAACoB,EAAAA,KAAI,CAACP,MAAO,CAAEK,UAAY,QAASC,GAAIrB,EAAKK,OAAOQ,MACjDD,GAGK,aAATX,GAAuB,MAE1BC,EAAAA,cAAA,aAAQF,EAAKG,YAAYoB,MACxBxB,EAAQC,EAAMC,GAGrB,C,gHCjDA,MAAMuB,EAAS,CACb,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAGIC,EAAoBC,IACxB,MAAMC,EAAQD,EAAEE,MAAM,KACtB,OAAwB,IAAjBD,EAAME,OAAgB,GAAEL,GAAQG,EAAM,GAAK,OAAOA,EAAM,QAAQA,EAAM,KAAOD,CAAC,EAIjFR,EAAuB,CAC3B,CACElB,KAAM,CACJK,OAAQ,CACNQ,KAAM,wGACNK,UAAU,EACVZ,KAAM,wCAERH,YAAa,CACXS,MAAO,8DACPW,KAAM,eAGVtB,KAAM,aASJW,EAAQ,kBAEC,SAASkB,EAAQnB,GAO5B,IAP6B,SAC/BoB,EAAQ,KACRC,GAKArB,EACA,MAAMsB,EAAUD,EAAKE,kBAAkBC,MAEjCC,EAAoB,GAC1B,IAAIC,EAAU,EACZC,EAAc,EAChB,KAAOD,EAAUJ,EAAQJ,QAAUS,EAAcpB,EAASW,QACpDI,EAAQI,GAASrC,KAAKG,YAAYoB,KAAOL,EAASoB,GAAatC,KAAKG,YAAYoB,KAClFa,EAAMG,KAAKN,EAAQI,MAEnBD,EAAMG,KAAKrB,EAASoB,MAUxB,OAPID,EAAUJ,EAAQJ,QACpBO,EAAMG,KAAIC,MAAVJ,GAAKK,EAAAA,EAAAA,GAASR,EAAQS,MAAML,KAE1BC,EAAcpB,EAASW,QACzBO,EAAMG,KAAIC,MAAVJ,GAAKK,EAAAA,EAAAA,GAASvB,EAASwB,MAAMJ,KAI7BpC,EAAAA,cAACyC,EAAAA,EAAM,CAACZ,SAAUA,EAAUnB,MAAOA,EAAOgC,YAAY,mCACnDR,EAAMS,KAAI,CAACC,EAAGC,KACbD,EAAE9C,KAAKG,YAAYoB,KAAOE,EAAiBqB,EAAE9C,KAAKG,YAAYoB,MAEvDrB,EAAAA,cAACQ,EAAAA,EAAW,CAACI,IAAKiC,EAAG/C,KAAM8C,EAAE9C,KAAMC,KAAM6C,EAAE7C,UAI1D,C,oECnFO,MAAMkB,EAAIR,IAAA,IAAC,GAChBU,EAAE,MACFN,EAAK,SACLiC,GAIArC,EAAA,OACAT,EAAAA,cAAA,KAAGa,MAAOA,EAAOkC,KAAM5B,EAAI6B,OAAO,SAASC,IAAI,uBAC5CH,EACC,C","sources":["webpack://sarangjo.github.io/./src/components/postExcerpt.tsx","webpack://sarangjo.github.io/./src/pages/blog.tsx","webpack://sarangjo.github.io/./src/utils/index.tsx"],"sourcesContent":["import React from \"react\";\nimport { Link } from \"gatsby\";\nimport { rhythm } from \"../utils/typography\";\nimport { L } from \"../utils\";\n\nconst content = (node: PostNode, type?: string) =>\n  type === \"theater\" ? (\n    <p>{node.frontmatter.source}</p>\n  ) : type === \"external\" ? (\n    <p>\n      <i>{node.fields.note}</i>\n    </p>\n  ) : (\n    <p dangerouslySetInnerHTML={{ __html: node.excerpt as TrustedHTML }} />\n  );\n\nexport interface PostNode {\n  frontmatter: {\n    title: string;\n    date: string;\n    source?: string;\n  };\n  fields: {\n    slug: string;\n    external?: boolean;\n    note?: string;\n  };\n  excerpt?: string | TrustedHTML;\n}\n\nexport default function PostExcerpt({ node, type }: { node: PostNode; type?: string }) {\n  const title = node.frontmatter.title || node.fields.slug;\n  return (\n    <div key={node.fields.slug}>\n      <h3\n        style={{\n          marginBottom: rhythm(1 / 4),\n        }}\n      >\n        {node.fields.external ? (\n          <L style={{ boxShadow: `none` }} to={node.fields.slug}>\n            {title}\n          </L>\n        ) : (\n          <Link style={{ boxShadow: `none` }} to={node.fields.slug}>\n            {title}\n          </Link>\n        )}\n        {type === \"external\" && \"\\u{1f855}\"}\n      </h3>\n      <small>{node.frontmatter.date}</small>\n      {content(node, type)}\n    </div>\n  );\n}\n","import React from \"react\";\nimport Layout from \"../components/layout\";\nimport { graphql, PageProps } from \"gatsby\";\nimport PostExcerpt, { PostNode } from \"../components/postExcerpt\";\n\nconst MONTHS = [\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\",\n];\n\nconst simpleDateParser = (d: string) => {\n  const parts = d.split(\"-\");\n  return parts.length === 3 ? `${MONTHS[+parts[1] - 1]} ${+parts[2]}, ${+parts[0]}` : d;\n};\n\n// Must be sorted!\nconst external: PostEdge[] = [\n  {\n    node: {\n      fields: {\n        slug: \"https://ani-sarang.medium.com/climate-change-in-america-a-defining-crisis-of-our-century-75e959f850d5\",\n        external: true,\n        note: \"Co-Authored with Anirudh Ramanathan.\",\n      },\n      frontmatter: {\n        title: \"Climate Change in America: A Defining Crisis of Our Century\",\n        date: \"2021-01-24\",\n      },\n    },\n    type: \"external\",\n  },\n];\n\nexport interface PostEdge {\n  node: PostNode;\n  type?: string;\n}\n\nconst title = \"Life Enthusiasm\";\n\nexport default function BlogPage({\n  location,\n  data,\n}: PageProps<{\n  allMarkdownRemark: {\n    edges: PostEdge[];\n  };\n}>) {\n  const mdPosts = data.allMarkdownRemark.edges;\n\n  const posts: PostEdge[] = [];\n  let postIdx = 0,\n    externalIdx = 0;\n  while (postIdx < mdPosts.length && externalIdx < external.length) {\n    if (mdPosts[postIdx].node.frontmatter.date > external[externalIdx].node.frontmatter.date) {\n      posts.push(mdPosts[postIdx++]);\n    } else {\n      posts.push(external[externalIdx++]);\n    }\n  }\n  if (postIdx < mdPosts.length) {\n    posts.push(...mdPosts.slice(postIdx));\n  }\n  if (externalIdx < external.length) {\n    posts.push(...external.slice(externalIdx));\n  }\n\n  return (\n    <Layout location={location} title={title} description=\"The world is a beautiful place.\">\n      {posts.map((e, i) => {\n        e.node.frontmatter.date = simpleDateParser(e.node.frontmatter.date);\n\n        return <PostExcerpt key={i} node={e.node} type={e.type} />;\n      })}\n    </Layout>\n  );\n}\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(\n      sort: { frontmatter: { date: DESC } }\n      filter: { fields: { slug: { regex: \"/.*/blog/.*/\" } } }\n    ) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date\n            title\n          }\n        }\n      }\n    }\n  }\n`;\n","import * as React from \"react\";\n\n// Helper component for a link out of the home page in a new tab\nexport const L = ({\n  to,\n  style,\n  children,\n}: React.PropsWithChildren<{\n  to: string;\n  style?: Record<string, any>;\n}>) => (\n  <a style={style} href={to} target=\"_blank\" rel=\"noopener noreferrer\">\n    {children}\n  </a>\n);\n"],"names":["content","node","type","React","frontmatter","source","fields","note","dangerouslySetInnerHTML","__html","excerpt","PostExcerpt","_ref","title","slug","key","style","marginBottom","rhythm","external","L","boxShadow","to","Link","date","MONTHS","simpleDateParser","d","parts","split","length","BlogPage","location","data","mdPosts","allMarkdownRemark","edges","posts","postIdx","externalIdx","push","apply","_toConsumableArray","slice","Layout","description","map","e","i","children","href","target","rel"],"sourceRoot":""}
{"version":3,"file":"component---src-pages-theater-js-dbd14532249b4f8ce0ae.js","mappings":"+JAoCA,IAxBoB,SAAC,GAAoB,IAAlBA,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KACrBC,EAAQF,EAAKG,YAAYD,OAASF,EAAKI,OAAOC,KACpD,OACE,uBAAKC,IAAKN,EAAKI,OAAOC,MACpB,sBACEE,MAAO,CACLC,cAAcC,EAAAA,EAAAA,IAAO,EAAI,KAG3B,gBAAC,EAAAC,KAAD,CAAMH,MAAO,CAAEI,UAAU,QAAWC,GAAIZ,EAAKI,OAAOC,MACjDH,IAGL,6BAAQF,EAAKG,YAAYU,MApBf,SAACb,EAAMC,GAAP,MACL,YAATA,EACE,yBAAID,EAAKG,YAAYW,QAErB,qBAAGC,wBAAyB,CAAEC,OAAQhB,EAAKiB,WAiBxCC,CAAQlB,EAAMC,M,uDCrBrB,SAASkB,EAAT,GAA4D,IAA7CC,EAA4C,EAA5CA,YAAaC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,SAAUrB,EAAS,EAATA,MAChD,OACE,gBAAC,EAAAsB,YAAD,CACEC,MAAOC,EACPC,OAAQ,SAAAC,GACN,IAAMC,EACJT,GAAeQ,EAAKE,KAAKC,aAAaX,YACxC,OACE,gBAAC,IAAD,CACEY,eAAgB,CACdX,KAAAA,GAEFnB,MAAOA,EACP+B,cAAa,QAAUL,EAAKE,KAAKC,aAAa7B,MAC9CoB,KAAM,CACJ,CACEY,KAAK,cACLhB,QAASW,GAEX,CACEM,SAAS,WACTjB,QAAShB,GAEX,CACEiC,SAAS,iBACTjB,QAASW,GAEX,CACEM,SAAS,UACTjB,QAAQ,WAEV,CACEgB,KAAK,eACLhB,QAAQ,WAEV,CACEgB,KAAK,kBACLhB,QAASU,EAAKE,KAAKC,aAAaK,QAElC,CACEF,KAAK,gBACLhB,QAAShB,GAEX,CACEgC,KAAK,sBACLhB,QAASW,IAGVQ,OACCd,EAASe,OAAS,EACd,CACAJ,KAAK,WACLhB,QAASK,EAASgB,KAAT,OAET,IAELF,OAAOf,QAQtBH,EAAIqB,aAAe,CACjBnB,KAAK,KACLC,KAAM,GACNC,SAAU,IAWZ,MAEA,IAAMG,EAAY,c,kFC7EZe,EAAQ,UAIRC,EAAAA,SAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,YAAAA,KAwBH,OAxBGA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,EAAAA,UACJf,OAAA,WACE,IAAQC,EAASe,KAAKC,MAAdhB,KACF1B,EAAQ0B,EAAKE,KAAKC,aAAa7B,MAC/B2C,EAAQjB,EAAKkB,YAAYC,MAG/B,OACE,gBAAC,IAAD,CACEC,SAAUL,KAAKC,MAAMI,SACrB9C,MAAOuC,EACPrB,YAbN,qEAcM6B,YAAgBR,EAAL,MAAgBvC,EAC3BgD,SAAS,GAET,gBAAC,IAAD,CACEhD,MAAOuC,EACPlB,SAAU,CAAC,UAAD,iCAEXsB,EAAMM,KAAI,WAAWC,GAAX,IAAGpD,EAAH,EAAGA,KAAH,OACT,gBAAC,IAAD,CAAaM,IAAK8C,EAAGpD,KAAMA,EAAMC,KAAK,iBAI7C,EAxBGyC,CAAqBW,EAAAA,WAgC3B","sources":["webpack://sarangjo.github.io/./src/components/postExcerpt.js","webpack://sarangjo.github.io/./src/components/seo.js","webpack://sarangjo.github.io/./src/pages/theater.js"],"sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"gatsby\";\nimport { rhythm } from \"../utils/typography\";\n\nconst content = (node, type) =>\n  type === \"theater\" ? (\n    <p>{node.frontmatter.source}</p>\n  ) : (\n    <p dangerouslySetInnerHTML={{ __html: node.excerpt }} />\n  );\n\nconst PostExcerpt = ({ node, type }) => {\n  const title = node.frontmatter.title || node.fields.slug;\n  return (\n    <div key={node.fields.slug}>\n      <h3\n        style={{\n          marginBottom: rhythm(1 / 4),\n        }}\n      >\n        <Link style={{ boxShadow: `none` }} to={node.fields.slug}>\n          {title}\n        </Link>\n      </h3>\n      <small>{node.frontmatter.date}</small>\n      {content(node, type)}\n    </div>\n  );\n};\n\nPostExcerpt.propTypes = {\n  node: PropTypes.object,\n  type: PropTypes.string,\n};\n\nexport default PostExcerpt;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Helmet from \"react-helmet\";\nimport { StaticQuery, graphql } from \"gatsby\";\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  return (\n    <StaticQuery\n      query={detailsQuery}\n      render={data => {\n        const metaDescription =\n          description || data.site.siteMetadata.description;\n        return (\n          <Helmet\n            htmlAttributes={{\n              lang,\n            }}\n            title={title}\n            titleTemplate={`%s | ${data.site.siteMetadata.title}`}\n            meta={[\n              {\n                name: `description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:title`,\n                content: title,\n              },\n              {\n                property: `og:description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:type`,\n                content: `website`,\n              },\n              {\n                name: `twitter:card`,\n                content: `summary`,\n              },\n              {\n                name: `twitter:creator`,\n                content: data.site.siteMetadata.author,\n              },\n              {\n                name: `twitter:title`,\n                content: title,\n              },\n              {\n                name: `twitter:description`,\n                content: metaDescription,\n              },\n            ]\n              .concat(\n                keywords.length > 0\n                  ? {\n                    name: `keywords`,\n                    content: keywords.join(`, `),\n                  }\n                  : []\n              )\n              .concat(meta)}\n          />\n        );\n      }}\n    />\n  );\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  keywords: [],\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n};\n\nexport default SEO;\n\nconst detailsQuery = graphql`\n  query DefaultSEOQuery {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n      }\n    }\n  }\n`;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { graphql } from \"gatsby\";\n\nimport PostExcerpt from \"../components/postExcerpt\";\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\n\nconst TITLE = \"Theater\";\nconst DESCRIPTION =\n  \"All the world's a stage, and all the men and women merely players.\";\n\nclass TheaterIndex extends React.Component {\n  render() {\n    const { data } = this.props;\n    const title = data.site.siteMetadata.title;\n    const posts = data.allFountain.edges;\n\n    // TODO factor out redundant code about helmetTitle\n    return (\n      <Layout\n        location={this.props.location}\n        title={TITLE}\n        description={DESCRIPTION}\n        helmetTitle={`${TITLE} | ${title}`}\n        showBio={false}\n      >\n        <SEO\n          title={TITLE}\n          keywords={[`theater`, `gatsby`, `javascript`, `react`]}\n        />\n        {posts.map(({ node }, i) => (\n          <PostExcerpt key={i} node={node} type=\"theater\" />\n        ))}\n      </Layout>\n    );\n  }\n}\n\nTheaterIndex.propTypes = {\n  location: PropTypes.object,\n  data: PropTypes.object,\n};\n\nexport default TheaterIndex;\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allFountain(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            source\n          }\n        }\n      }\n    }\n  }\n`;\n"],"names":["node","type","title","frontmatter","fields","slug","key","style","marginBottom","rhythm","Link","boxShadow","to","date","source","dangerouslySetInnerHTML","__html","excerpt","content","SEO","description","lang","meta","keywords","StaticQuery","query","detailsQuery","render","data","metaDescription","site","siteMetadata","htmlAttributes","titleTemplate","name","property","author","concat","length","join","defaultProps","TITLE","TheaterIndex","this","props","posts","allFountain","edges","location","helmetTitle","showBio","map","i","React"],"sourceRoot":""}
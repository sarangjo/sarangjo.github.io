{"version":3,"sources":["webpack://sarangjo.github.io/./src/components/seo.js","webpack://sarangjo.github.io/./src/templates/fountain-post.js"],"names":["SEO","description","lang","meta","keywords","title","StaticQuery","query","detailsQuery","render","data","metaDescription","site","siteMetadata","htmlAttributes","titleTemplate","name","content","property","author","concat","length","join","defaultProps","FountainPostTemplate","post","this","props","fountain","siteTitle","location","helmetTitle","frontmatter","date","className","dangerouslySetInnerHTML","__html","html","script","React"],"mappings":"+JAKA,SAASA,EAAT,GAA4D,IAA7CC,EAA4C,EAA5CA,YAAaC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,SAAUC,EAAS,EAATA,MAChD,OACE,gBAAC,EAAAC,YAAD,CACEC,MAAOC,EACPC,OAAQ,SAAAC,GACN,IAAMC,EACJV,GAAeS,EAAKE,KAAKC,aAAaZ,YACxC,OACE,gBAAC,KAAD,CACEa,eAAgB,CACdZ,QAEFG,MAAOA,EACPU,cAAa,QAAUL,EAAKE,KAAKC,aAAaR,MAC9CF,KAAM,CACJ,CACEa,KAAK,cACLC,QAASN,GAEX,CACEO,SAAS,WACTD,QAASZ,GAEX,CACEa,SAAS,iBACTD,QAASN,GAEX,CACEO,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,QAASP,EAAKE,KAAKC,aAAaM,QAElC,CACEH,KAAK,gBACLC,QAASZ,GAEX,CACEW,KAAK,sBACLC,QAASN,IAGVS,OACChB,EAASiB,OAAS,EACd,CACAL,KAAK,WACLC,QAASb,EAASkB,KAAT,OAET,IAELF,OAAOjB,QAQtBH,EAAIuB,aAAe,CACjBrB,KAAK,KACLC,KAAM,GACNC,SAAU,IAWZ,MAEA,IAAMI,EAAY,c,oFC5EZgB,E,6FACJf,OAAA,WACE,IAAMgB,EAAOC,KAAKC,MAAMjB,KAAKkB,SACvBC,EAAYH,KAAKC,MAAMjB,KAAKE,KAAKC,aAAaR,MAKpD,OACE,gBAAC,IAAD,CACEyB,SAAUJ,KAAKC,MAAMG,SACrBC,YAAgBN,EAAKO,YAAY3B,MAAtB,MAAiCwB,EAC5CxB,MAAOoB,EAAKO,YAAY3B,MACxBJ,YAAW,GAAKwB,EAAKO,YAAYC,MAEjC,gBAAC,IAAD,CAAK5B,MAAOoB,EAAKO,YAAY3B,QAC7B,uBAAK6B,UAAU,UACb,uBAAKC,wBAAyB,CAAEC,OAAQX,EAAKY,KAAKC,a,GAjBzBC,aA8BnC","file":"component---src-templates-fountain-post-js-3e4c6c824fe756086f8d.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Helmet from \"react-helmet\";\nimport { StaticQuery, graphql } from \"gatsby\";\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  return (\n    <StaticQuery\n      query={detailsQuery}\n      render={data => {\n        const metaDescription =\n          description || data.site.siteMetadata.description;\n        return (\n          <Helmet\n            htmlAttributes={{\n              lang,\n            }}\n            title={title}\n            titleTemplate={`%s | ${data.site.siteMetadata.title}`}\n            meta={[\n              {\n                name: `description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:title`,\n                content: title,\n              },\n              {\n                property: `og:description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:type`,\n                content: `website`,\n              },\n              {\n                name: `twitter:card`,\n                content: `summary`,\n              },\n              {\n                name: `twitter:creator`,\n                content: data.site.siteMetadata.author,\n              },\n              {\n                name: `twitter:title`,\n                content: title,\n              },\n              {\n                name: `twitter:description`,\n                content: metaDescription,\n              },\n            ]\n              .concat(\n                keywords.length > 0\n                  ? {\n                    name: `keywords`,\n                    content: keywords.join(`, `),\n                  }\n                  : []\n              )\n              .concat(meta)}\n          />\n        );\n      }}\n    />\n  );\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  keywords: [],\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n};\n\nexport default SEO;\n\nconst detailsQuery = graphql`\n  query DefaultSEOQuery {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n      }\n    }\n  }\n`;\n","import React from \"react\";\nimport { graphql } from \"gatsby\";\nimport PropTypes from \"prop-types\";\n\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\n\nimport \"./fountain-post.css\";\n\nclass FountainPostTemplate extends React.Component {\n  render() {\n    const post = this.props.data.fountain;\n    const siteTitle = this.props.data.site.siteMetadata.title;\n    // TODO add description as part of the summary of the piece\n    // const description = post.excerpt;\n    // helmetDescription={description}\n\n    return (\n      <Layout\n        location={this.props.location}\n        helmetTitle={`${post.frontmatter.title} | ${siteTitle}`}\n        title={post.frontmatter.title}\n        description={`${post.frontmatter.date}`}\n      >\n        <SEO title={post.frontmatter.title} />\n        <div className=\"script\">\n          <div dangerouslySetInnerHTML={{ __html: post.html.script }} />\n        </div>\n      </Layout>\n    );\n  }\n}\n\nFountainPostTemplate.propTypes = {\n  data: PropTypes.object,\n  pageContext: PropTypes.object,\n  location: PropTypes.object,\n};\n\nexport default FountainPostTemplate;\n\nexport const pageQuery = graphql`\n  query TheaterPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n        author\n      }\n    }\n    fountain(fields: { slug: { eq: $slug } }) {\n      id\n      html {\n        script\n      }\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}
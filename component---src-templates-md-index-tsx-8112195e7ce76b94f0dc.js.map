{"version":3,"file":"component---src-templates-md-index-tsx-8112195e7ce76b94f0dc.js","mappings":"6LAWe,SAASA,EAAT,GAMX,IALFC,EAKC,EALDA,KACAC,EAIC,EAJDA,KAKMC,EAAQF,EAAKG,YAAYD,OAASF,EAAKI,OAAOC,KACpD,OACEC,EAAAA,cAAAA,MAAAA,CAAKC,IAAKP,EAAKI,OAAOC,MACpBC,EAAAA,cAAAA,KAAAA,CACEE,MAAO,CACLC,cAAcC,EAAAA,EAAAA,IAAO,EAAI,KAG3BJ,EAAAA,cAACK,EAAAA,KAAD,CAAMH,MAAO,CAAEI,UAAU,QAAWC,GAAIb,EAAKI,OAAOC,MACjDH,IAGLI,EAAAA,cAAAA,QAAAA,KAAQN,EAAKG,YAAYW,MA1Bf,SAACd,EAAMC,GAAP,MACL,YAATA,EACEK,EAAAA,cAAAA,IAAAA,KAAIN,EAAKG,YAAYY,QAErBT,EAAAA,cAAAA,IAAAA,CAAGU,wBAAyB,CAAEC,OAAQjB,EAAKkB,UAJ/C,CA2BOC,CAAQnB,EAAMC,GAGpB,C,yFC9Bc,SAASmB,EAAT,GAYX,IAXFC,EAWC,EAXDA,YAWC,IAVDC,KAAAA,OAUC,iBATDC,KAAAA,OASC,MATM,GASN,MARDC,SAAAA,OAQC,MARU,GAQV,EAPDtB,EAOC,EAPDA,MAQA,OACEI,EAAAA,cAACmB,EAAAA,YAAD,CACEC,MAAOC,EACPC,OAAQ,SAACC,GACP,IAAMC,EACJT,GAAeQ,EAAKE,KAAKC,aAAaX,YACxC,OACEf,EAAAA,cAAC2B,EAAAA,EAAD,CACEC,eAAgB,CACdZ,KAAAA,GAEFpB,MAAOA,EACPiC,cAAa,QAAUN,EAAKE,KAAKC,aAAa9B,MAC9CqB,KAAM,CACJ,CACEa,KAAK,cACLjB,QAASW,GAEX,CACEO,SAAS,WACTlB,QAASjB,GAEX,CACEmC,SAAS,iBACTlB,QAASW,GAEX,CACEO,SAAS,UACTlB,QAAQ,WAEV,CACEiB,KAAK,eACLjB,QAAQ,WAEV,CACEiB,KAAK,kBACLjB,QAASU,EAAKE,KAAKC,aAAaM,QAElC,CACEF,KAAK,gBACLjB,QAASjB,GAEX,CACEkC,KAAK,sBACLjB,QAASW,IAGVS,OACCf,EAASgB,OAAS,EACd,CACEJ,KAAK,WACLjB,QAASK,EAASiB,KAATjB,OAEX,IAELe,OAAOhB,IAtDlB,GA8DJ,KAAMI,EAAY,Y,+GCzEH,SAASe,EAAQC,GAC9B,IAAQd,EAASc,EAATd,KAGR,EAAoCc,EAAMC,YAAlC1C,EAAR,EAAQA,MAAOmB,EAAf,EAAeA,YAAawB,EAA5B,EAA4BA,IAEtBC,EAAYjB,EAAKE,KAAKC,aAAa9B,MACnC6C,EAAQlB,EAAKmB,kBAAkBC,MAErC,OACE3C,EAAAA,cAAC4C,EAAAA,EAAD,CACEC,SAAUR,EAAMQ,SAChBjD,MAAOA,EACPmB,YAAaA,EACb+B,YAAgBlD,EAAL,MAAgB4C,GAE3BxC,EAAAA,cAACc,EAAAA,EAAD,CAAKlB,MAAOA,EAAOsB,SAAUqB,IAC5BE,EAAMM,KAAI,WAAWC,GAAX,IAAGtD,EAAH,EAAGA,KAAH,OACTM,EAAAA,cAACP,EAAAA,EAAD,CAAaQ,IAAK+C,EAAGtD,KAAMA,GAD5B,IAKN,C","sources":["webpack://sarangjo.github.io/./src/components/postExcerpt.tsx","webpack://sarangjo.github.io/./src/components/seo.tsx","webpack://sarangjo.github.io/./src/templates/md-index.tsx"],"sourcesContent":["import React from \"react\";\nimport { Link } from \"gatsby\";\nimport { rhythm } from \"../utils/typography\";\n\nconst content = (node, type) =>\n  type === \"theater\" ? (\n    <p>{node.frontmatter.source}</p>\n  ) : (\n    <p dangerouslySetInnerHTML={{ __html: node.excerpt }} />\n  );\n\nexport default function PostExcerpt({\n  node,\n  type,\n}: {\n  node: any;\n  type?: string;\n}) {\n  const title = node.frontmatter.title || node.fields.slug;\n  return (\n    <div key={node.fields.slug}>\n      <h3\n        style={{\n          marginBottom: rhythm(1 / 4),\n        }}\n      >\n        <Link style={{ boxShadow: `none` }} to={node.fields.slug}>\n          {title}\n        </Link>\n      </h3>\n      <small>{node.frontmatter.date}</small>\n      {content(node, type)}\n    </div>\n  );\n}\n","import React from \"react\";\nimport Helmet from \"react-helmet\";\nimport { StaticQuery, graphql } from \"gatsby\";\n\nexport default function SEO({\n  description,\n  lang = `en`,\n  meta = [],\n  keywords = [],\n  title,\n}: {\n  description?: string;\n  lang?: string;\n  meta?: any[];\n  keywords?: string[];\n  title: string;\n}) {\n  return (\n    <StaticQuery\n      query={detailsQuery}\n      render={(data) => {\n        const metaDescription =\n          description || data.site.siteMetadata.description;\n        return (\n          <Helmet\n            htmlAttributes={{\n              lang,\n            }}\n            title={title}\n            titleTemplate={`%s | ${data.site.siteMetadata.title}`}\n            meta={[\n              {\n                name: `description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:title`,\n                content: title,\n              },\n              {\n                property: `og:description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:type`,\n                content: `website`,\n              },\n              {\n                name: `twitter:card`,\n                content: `summary`,\n              },\n              {\n                name: `twitter:creator`,\n                content: data.site.siteMetadata.author,\n              },\n              {\n                name: `twitter:title`,\n                content: title,\n              },\n              {\n                name: `twitter:description`,\n                content: metaDescription,\n              },\n            ]\n              .concat(\n                keywords.length > 0\n                  ? {\n                      name: `keywords`,\n                      content: keywords.join(`, `),\n                    }\n                  : []\n              )\n              .concat(meta)}\n          />\n        );\n      }}\n    />\n  );\n}\n\nconst detailsQuery = graphql`\n  query DefaultSEOQuery {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n      }\n    }\n  }\n`;\n","import React from \"react\";\nimport { graphql, PageProps } from \"gatsby\";\n\nimport Layout from \"../components/layout\";\nimport PostExcerpt from \"../components/postExcerpt\";\nimport SEO from \"../components/seo\";\n\nexport default function MdIndex(props: PageProps<any>) {\n  const { data } = props;\n\n  // TODO stronger typing\n  const { title, description, seo } = props.pageContext as any;\n\n  const siteTitle = data.site.siteMetadata.title;\n  const posts = data.allMarkdownRemark.edges;\n\n  return (\n    <Layout\n      location={props.location}\n      title={title}\n      description={description}\n      helmetTitle={`${title} | ${siteTitle}`}\n    >\n      <SEO title={title} keywords={seo} />\n      {posts.map(({ node }, i) => (\n        <PostExcerpt key={i} node={node} />\n      ))}\n    </Layout>\n  );\n}\n\nexport const pageQuery = graphql`\n  query MdIndex($myPath: String) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { fields: { slug: { regex: $myPath } } }\n    ) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n          }\n        }\n      }\n    }\n  }\n`;\n"],"names":["PostExcerpt","node","type","title","frontmatter","fields","slug","React","key","style","marginBottom","rhythm","Link","boxShadow","to","date","source","dangerouslySetInnerHTML","__html","excerpt","content","SEO","description","lang","meta","keywords","StaticQuery","query","detailsQuery","render","data","metaDescription","site","siteMetadata","Helmet","htmlAttributes","titleTemplate","name","property","author","concat","length","join","MdIndex","props","pageContext","seo","siteTitle","posts","allMarkdownRemark","edges","Layout","location","helmetTitle","map","i"],"sourceRoot":""}
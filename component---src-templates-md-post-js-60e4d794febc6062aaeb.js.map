{"version":3,"file":"component---src-templates-md-post-js-60e4d794febc6062aaeb.js","mappings":"+JAKA,SAASA,EAAT,GAA4D,IAA7CC,EAA4C,EAA5CA,YAAaC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,SAAUC,EAAS,EAATA,MAChD,OACE,gBAAC,EAAAC,YAAD,CACEC,MAAOC,EACPC,OAAQ,SAAAC,GACN,IAAMC,EACJV,GAAeS,EAAKE,KAAKC,aAAaZ,YACxC,OACE,gBAAC,IAAD,CACEa,eAAgB,CACdZ,KAAAA,GAEFG,MAAOA,EACPU,cAAa,QAAUL,EAAKE,KAAKC,aAAaR,MAC9CF,KAAM,CACJ,CACEa,KAAK,cACLC,QAASN,GAEX,CACEO,SAAS,WACTD,QAASZ,GAEX,CACEa,SAAS,iBACTD,QAASN,GAEX,CACEO,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,QAASP,EAAKE,KAAKC,aAAaM,QAElC,CACEH,KAAK,gBACLC,QAASZ,GAEX,CACEW,KAAK,sBACLC,QAASN,IAGVS,OACChB,EAASiB,OAAS,EACd,CACAL,KAAK,WACLC,QAASb,EAASkB,KAAT,OAET,IAELF,OAAOjB,QAQtBH,EAAIuB,aAAe,CACjBrB,KAAK,KACLC,KAAM,GACNC,SAAU,IAWZ,MAEA,IAAMI,EAAY,c,2FC3EZgB,EAAAA,SAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,YAAAA,KAyDH,OAzDGA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,EAAAA,UACJf,OAAA,WACE,IAKIgB,EALEC,EAAOC,KAAKC,MAAMlB,KAAKmB,eACvBC,EAAYH,KAAKC,MAAMlB,KAAKE,KAAKC,aAAaR,MAC9CJ,EAAcyB,EAAKK,QACzB,EAA2BJ,KAAKC,MAAMI,YAA9BC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,KAgClB,OA7BID,GAAYC,KACdT,EACE,sBACEU,MAAO,CACLC,QAAS,OACTC,SAAU,OACVC,eAAgB,gBAChBC,UAAW,OACXC,QAAS,IAGX,0BACGP,GACC,gBAAC,EAAAQ,KAAD,CAAMC,GAAIT,EAASU,OAAOC,KAAMC,IAAI,QAApC,KACKZ,EAASa,YAAYzC,QAI9B,0BACG6B,GACC,gBAAC,EAAAO,KAAD,CAAMC,GAAIR,EAAKS,OAAOC,KAAMC,IAAI,QAC7BX,EAAKY,YAAYzC,MADpB,SAUR,gBAAC,IAAD,CACE0C,SAAUpB,KAAKC,MAAMmB,SACrBC,YAAgBtB,EAAKoB,YAAYzC,MAAtB,MAAiCyB,EAC5CzB,MAAOqB,EAAKoB,YAAYzC,MACxB4C,kBAAmBhD,EACnBA,YAAgByB,EAAKoB,YAAYI,KAAtB,MACTxB,EAAKiB,OAAOQ,YAAYC,MAG1B,gBAAC,IAAD,CAAK/C,MAAOqB,EAAKoB,YAAYzC,MAAOJ,YAAayB,EAAKK,UACtD,uBAAKsB,wBAAyB,CAAEC,OAAQ5B,EAAK6B,QAC7C,sBACEpB,MAAO,CACLqB,cAAcC,EAAAA,EAAAA,IAAO,MAGxBhC,IAGN,EAzDGD,CAAuBkC,EAAAA,WAkE7B","sources":["webpack://sarangjo.github.io/./src/components/seo.js","webpack://sarangjo.github.io/./src/templates/md-post.js"],"sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Helmet from \"react-helmet\";\nimport { StaticQuery, graphql } from \"gatsby\";\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  return (\n    <StaticQuery\n      query={detailsQuery}\n      render={data => {\n        const metaDescription =\n          description || data.site.siteMetadata.description;\n        return (\n          <Helmet\n            htmlAttributes={{\n              lang,\n            }}\n            title={title}\n            titleTemplate={`%s | ${data.site.siteMetadata.title}`}\n            meta={[\n              {\n                name: `description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:title`,\n                content: title,\n              },\n              {\n                property: `og:description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:type`,\n                content: `website`,\n              },\n              {\n                name: `twitter:card`,\n                content: `summary`,\n              },\n              {\n                name: `twitter:creator`,\n                content: data.site.siteMetadata.author,\n              },\n              {\n                name: `twitter:title`,\n                content: title,\n              },\n              {\n                name: `twitter:description`,\n                content: metaDescription,\n              },\n            ]\n              .concat(\n                keywords.length > 0\n                  ? {\n                    name: `keywords`,\n                    content: keywords.join(`, `),\n                  }\n                  : []\n              )\n              .concat(meta)}\n          />\n        );\n      }}\n    />\n  );\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  keywords: [],\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n};\n\nexport default SEO;\n\nconst detailsQuery = graphql`\n  query DefaultSEOQuery {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n      }\n    }\n  }\n`;\n","import React from \"react\";\nimport { Link, graphql } from \"gatsby\";\nimport PropTypes from \"prop-types\";\n\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\nimport { rhythm } from \"../utils/typography\";\n\nimport \"./md-post.css\";\n\nclass MdPostTemplate extends React.Component {\n  render() {\n    const post = this.props.data.markdownRemark;\n    const siteTitle = this.props.data.site.siteMetadata.title;\n    const description = post.excerpt;\n    const { previous, next } = this.props.pageContext;\n\n    let prevNextLinks;\n    if (previous || next) {\n      prevNextLinks = (\n        <ul\n          style={{\n            display: \"flex\",\n            flexWrap: \"wrap\",\n            justifyContent: \"space-between\",\n            listStyle: \"none\",\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      );\n    }\n\n    return (\n      <Layout\n        location={this.props.location}\n        helmetTitle={`${post.frontmatter.title} | ${siteTitle}`}\n        title={post.frontmatter.title}\n        helmetDescription={description}\n        description={`${post.frontmatter.date} - ${\n          post.fields.readingTime.text\n        }`}\n      >\n        <SEO title={post.frontmatter.title} description={post.excerpt} />\n        <div dangerouslySetInnerHTML={{ __html: post.html }} />\n        <hr\n          style={{\n            marginBottom: rhythm(1),\n          }}\n        />\n        {prevNextLinks}\n      </Layout>\n    );\n  }\n}\n\nMdPostTemplate.propTypes = {\n  data: PropTypes.object,\n  pageContext: PropTypes.object,\n  location: PropTypes.object,\n};\n\nexport default MdPostTemplate;\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n        author\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      fields {\n        readingTime {\n          text\n        }\n      }\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n      }\n    }\n  }\n`;\n"],"names":["SEO","description","lang","meta","keywords","title","StaticQuery","query","detailsQuery","render","data","metaDescription","site","siteMetadata","htmlAttributes","titleTemplate","name","content","property","author","concat","length","join","defaultProps","MdPostTemplate","prevNextLinks","post","this","props","markdownRemark","siteTitle","excerpt","pageContext","previous","next","style","display","flexWrap","justifyContent","listStyle","padding","Link","to","fields","slug","rel","frontmatter","location","helmetTitle","helmetDescription","date","readingTime","text","dangerouslySetInnerHTML","__html","html","marginBottom","rhythm","React"],"sourceRoot":""}